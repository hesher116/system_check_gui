package main

import (
	"fmt"
	"time"

	"github.com/shirou/gopsutil/v3/cpu"
	"github.com/shirou/gopsutil/v3/host"
	"github.com/shirou/gopsutil/v3/mem"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/app"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/widget"
)

func getSystemStatus() string {
	v, err := mem.VirtualMemory()
	if err != nil {
		return "–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –ø–∞–º º—è—Ç—ñ"
	}

	uptimeSec, err := host.Uptime()
	if err != nil {
		return "–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –∞–ø—Ç–∞–π–º—É"
	}
	uptime := time.Duration(uptimeSec) * time.Second

	cpuPercents, err := cpu.Percent(0, false)
	if err != nil || len(cpuPercents) == 0 {
		return "–ü–æ–º–∏–ª–∫–∞ CPU"
	}
	cpuLoad := cpuPercents[0]

	status := fmt.Sprintf(
		"–ê–ø—Ç–∞–π–º: %s\nüíæ RAM: %.2f GB —ñ–∑ %.2f GB\nüî• CPU: %.1f%%\n",
		uptime.Round(time.Second),
		float64(v.Used)/1024/1024/1024,
		float64(v.Total)/1024/1024/1024,
		cpuLoad,
	)

	if v.Available < 512*1024*1024 {
		status += "–ú–∞–ª–æ –¥–æ—Å—Ç—É–ø–Ω–æ—ó –ø–∞–º º—è—Ç—ñ."
	} else if v.Available < 2*1024*1024*1024 {
		status += "–ü–∞–º º—è—Ç—ñ –Ω–µ–±–∞–≥–∞—Ç–æ."
	} else if cpuLoad > 80 {
		status += "–í–∏—Å–æ–∫–µ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è CPU!"
	} else {
		status += "–í—Å–µ –¥–æ–±—Ä–µ."
	}

	return status
}

func main() {
	a := app.New()
	w := a.NewWindow("System Check")

	label := widget.NewLabel(getSystemStatus())

	refreshBtn := widget.NewButton("üîÅ –û–Ω–æ–≤–∏—Ç–∏", func() {
		label.SetText(getSystemStatus())
	})

	w.SetContent(container.NewVBox(
		label,
		refreshBtn,
	))

	w.Resize(fyne.NewSize(400, 200))
	w.ShowAndRun()
}
